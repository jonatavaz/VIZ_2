# -*- coding: utf-8 -*-
"""Trabalho VIZ.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YKww1HsBHHnm5paPPWkpQJJOSDNvGb_v

##Importação
"""

# prompt: leia os dataframes de vendas2020, vendas2021 e vendas2022 em xlsx, depois unifique-os em um unico dataframe

import pandas as pd

# Load the dataframes
df_vendas2020 = pd.read_excel('vendas2020.xlsx')
df_vendas2021 = pd.read_excel('vendas2021.xlsx')
df_vendas2022 = pd.read_excel('vendas2022.xlsx')

# Concatenate the dataframes
df_vendas_total = pd.concat([df_vendas2020, df_vendas2021, df_vendas2022], ignore_index=True)

# Display the head of the unified dataframe
print(df_vendas_total.head())

# prompt: leia o cadcli e unifique as colunas de primeiro nome e sobrenome na tabela clientes

# Assume 'cadcli.xlsx' is the file containing customer data
df_clientes = pd.read_excel('cadcli.xlsx')

# Unify the 'Primeiro Nome' and 'Sobrenome' columns into a new 'Nome Completo' column
# Check if the columns exist before attempting to combine them
if 'Primeiro Nome' in df_clientes.columns and 'Sobrenome' in df_clientes.columns:
  df_clientes['Nome Completo'] = df_clientes['Primeiro Nome'].astype(str) + ' ' + df_clientes['Sobrenome'].astype(str)
elif 'Primeiro Nome' in df_clientes.columns:
    df_clientes['Nome Completo'] = df_clientes['Primeiro Nome']
elif 'Sobrenome' in df_clientes.columns:
    df_clientes['Nome Completo'] = df_clientes['Sobrenome']
else:
  print("Columns 'Primeiro Nome' and 'Sobrenome' not found in the dataframe.")

# You can drop the original columns if you no longer need them
# df_clientes = df_clientes.drop(['Primeiro Nome', 'Sobrenome'], axis=1)

# Display the head of the updated clientes dataframe
print(df_clientes.head())

# Reorder the columns to place 'Nome Completo' before 'Email'
cols = df_clientes.columns.tolist()
# Assuming 'Id' is the column before which 'Nome Completo' should be inserted
if 'Id' in cols and 'Nome Completo' in cols and 'Email' in cols:
  cols.insert(cols.index('Email'), cols.pop(cols.index('Nome Completo')))
  df_clientes = df_clientes[cols]
elif 'Nome Completo' in cols and 'Email' in cols:
    # If 'Id' is not present, place 'Nome Completo' before 'Email' at the beginning of the list
    cols.insert(0, cols.pop(cols.index('Nome Completo')))
    df_clientes = df_clientes[cols]
else:
  print("Columns 'Id', 'Nome Completo', or 'Email' not found for reordering.")


# Drop the original 'Primeiro Nome' and 'Sobrenome' columns if they were successfully combined
if 'Primeiro Nome' in df_clientes.columns:
    df_clientes = df_clientes.drop('Primeiro Nome', axis=1)
if 'Sobrenome' in df_clientes.columns:
    df_clientes = df_clientes.drop('Sobrenome', axis=1)

# Display the head of the updated clientes dataframe
print(df_clientes.head())

# prompt: leia agora os dataframes de loja (cadloj) e de produto (cad prod)

# Assume 'cadloj.xlsx' is the file containing store data
df_lojas = pd.read_excel('cadloj.xlsx')

# Assume 'cadprod.xlsx' is the file containing product data
df_produtos = pd.read_excel('cadprod.xlsx')

# Display the head of the dataframes
print(df_lojas.head())
print(df_produtos.head())

"""##Gráfico 1

"""

# prompt: pip install para uso de dashboard

!pip install dash plotly jupyter-dash

import dash
from dash import dcc
from dash import html
import plotly.express as px
import pandas as pd

# Supondo que os DataFrames df_vendas_total e df_lojas já estejam carregados

# Agrupar os dados de vendas por loja e contar o número de vendas
vendas_por_loja = df_vendas_total['ID Loja'].value_counts().reset_index()
vendas_por_loja.columns = ['ID Loja', 'Numero de Vendas']

# Print column names of df_lojas to inspect them
print("Columns in df_lojas:", df_lojas.columns)

# Fazer merge com df_lojas para obter o nome da loja
# Update column names in the merge based on the printed output
vendas_por_loja = vendas_por_loja.merge(
    df_lojas[['ID Loja', 'Nome da Loja']], # Assuming the columns are named 'ID Loja' and 'Nome da Loja'
    left_on='ID Loja',
    right_on='ID Loja', # Changed from 'Id' to 'ID Loja' based on typical Excel export
    how='left'
)

# Criar gráfico de barras com Plotly
fig_vendas_por_loja = px.bar(
    vendas_por_loja,
    x='Nome da Loja', # Changed from 'Nome Loja' to 'Nome da Loja'
    y='Numero de Vendas',
    title='Número de Vendas por Loja'
)

# Inicializar o app Dash
app = dash.Dash(__name__)

# Definir o layout do dashboard
app.layout = html.Div([
    html.H1("Dashboard de Vendas"),

    html.Div([
        html.H2("Vendas por Loja"),
        dcc.Graph(
            id='graph-vendas-por-loja',
            figure=fig_vendas_por_loja
        ),
    ]),
])

# Para ambiente local, descomente a linha abaixo:
# app.run_server(debug=True)

# Para ambientes como Colab, mostramos apenas o gráfico:
fig_vendas_por_loja.show()

# Exibir as primeiras linhas do DataFrame de lojas

# Juntar com produtos
df_vendas_total = df_vendas_total.merge(df_produtos[['SKU', 'Tipo do Produto', 'Preço Unitario']], on='SKU', how='left')

# Calcular valor total
df_vendas_total['Valor Total'] = df_vendas_total['Qtd Vendida'] * df_vendas_total['Preço Unitario']

# Juntar com nome da loja
df_vendas_total = df_vendas_total.merge(df_lojas[['ID Loja', 'Nome da Loja']], on='ID Loja', how='left')

import dash
from dash import dcc, html, Input, Output
import plotly.express as px

# Inicializar o app
app = dash.Dash(__name__)

# Obter lista de tipos de produto
product_types = ['Todos'] + sorted(df_vendas_total['Tipo do Produto'].dropna().unique().tolist())

# Layout do app
app.layout = html.Div([
    html.H1("Top 10 Lojas por Vendas", style={"textAlign": "center"}),

    html.Div([
        html.Label("Selecione o Tipo de Produto:"),
        dcc.Dropdown(
            id='dropdown-tipo-produto',
            options=[{'label': tipo, 'value': tipo} for tipo in product_types],
            value='Todos',
            clearable=False
        ),
    ], style={'width': '50%', 'margin': 'auto'}),

    dcc.Graph(id='grafico-top-lojas')
])

# Callback
@app.callback(
    Output('grafico-top-lojas', 'figure'),
    Input('dropdown-tipo-produto', 'value')
)
def atualizar_grafico(tipo_selecionado):
    if tipo_selecionado == 'Todos':
        df_filtrado = df_vendas_total.copy()
    else:
        df_filtrado = df_vendas_total[df_vendas_total['Tipo do Produto'] == tipo_selecionado]

    # Agrupar por loja e somar o valor total
    vendas_lojas = df_filtrado.groupby('Nome da Loja')['Valor Total'].sum().reset_index()

    # Selecionar top 10
    top_10 = vendas_lojas.nlargest(10, 'Valor Total')

    # Criar gráfico
    fig = px.bar(
        top_10,
        x='Nome da Loja',
        y='Valor Total',
        title=f'Top 10 Lojas - {tipo_selecionado}',
        labels={'Valor Total': 'Total Vendido (R$)', 'Nome da Loja': 'Loja'}
    )
    return fig

# Rodar o app localmente
if __name__ == '__main__':
    app.run(debug=True)

"""##Gráfico 2

"""

import dash
from dash import dcc, html, Input, Output
import plotly.express as px

# Inicializar o app
app = dash.Dash(__name__)

# Obter a lista de lojas únicas
lojas = sorted(df_vendas_total['Nome da Loja'].dropna().unique().tolist())

# Layout
app.layout = html.Div([
    html.H1("Participação por Tipo de Produto", style={'textAlign': 'center'}),

    html.Div([
        html.Label("Selecione a Loja:"),
        dcc.Dropdown(
            id='dropdown-loja',
            options=[{'label': loja, 'value': loja} for loja in lojas],
            value=lojas[0],
            clearable=False
        ),
    ], style={'width': '50%', 'margin': 'auto'}),

    dcc.Graph(id='grafico-pizza')
])

# Callback para atualizar o gráfico
@app.callback(
    Output('grafico-pizza', 'figure'),
    Input('dropdown-loja', 'value')
)
def atualizar_pizza(loja_selecionada):
    df_filtrado = df_vendas_total[df_vendas_total['Nome da Loja'] == loja_selecionada]

    vendas_por_tipo = df_filtrado.groupby('Tipo do Produto')['Valor Total'].sum().reset_index()

    fig2 = px.pie(
        vendas_por_tipo,
        names='Tipo do Produto',
        values='Valor Total',
        title=f'Participação nas Vendas por Tipo de Produto - {loja_selecionada}',
        hole=0.4  # Deixa o centro vazio (donut chart)
    )

    return fig2

# Rodar o app localmente
if __name__ == '__main__':
    app.run(debug=True)

"""##Gráfico 3"""

df_vendas_total['Data da Venda'] = pd.to_datetime(df_vendas_total['Data da Venda'])

df_vendas_total['Ano'] = df_vendas_total['Data da Venda'].dt.year
df_vendas_total['Mes'] = df_vendas_total['Data da Venda'].dt.month

import dash
from dash import dcc, html, Input, Output
import plotly.express as px

# Mesclar os dados de vendas com os nomes dos clientes
if 'Nome Completo' in df_vendas_total.columns:
    df_vendas_total = df_vendas_total.drop(columns=['Nome Completo'])

df_vendas_total = df_vendas_total.merge(df_clientes[['ID Cliente', 'Nome Completo']], on='ID Cliente', how='left')

# Inicializar o app
app = dash.Dash(__name__)

# Lista de anos disponíveis
anos_disponiveis = sorted(df_vendas_total['Ano'].dropna().unique().tolist())

# Layout
app.layout = html.Div([
    html.H1("Top 10 Clientes por Ano", style={'textAlign': 'center'}),

    html.Div([
        html.Label("Selecione o Ano:"),
        dcc.Dropdown(
            id='dropdown-ano',
            options=[{'label': str(ano), 'value': ano} for ano in anos_disponiveis],
            value=anos_disponiveis[0],
            clearable=False
        )
    ], style={'width': '40%', 'margin': 'auto'}),

    dcc.Graph(id='grafico-clientes-barra')
])

# Callback
@app.callback(
    Output('grafico-clientes-barra', 'figure'),
    Input('dropdown-ano', 'value')
)
def atualizar_grafico_barra(ano_selecionado):
    df_ano = df_vendas_total[df_vendas_total['Ano'] == ano_selecionado]

    # Top 10 clientes por valor total
    top_clientes = (
        df_ano.groupby('Nome Completo')['Valor Total']
        .sum()
        .nlargest(10)
        .reset_index()
    )

    fig1 = px.bar(
    top_clientes,
    x='Valor Total',
    y='Nome Completo',
    orientation='h',
    title=f'Top 10 Clientes por Vendas em Reais ({ano_selecionado})',
    labels={'Nome Completo': 'Cliente', 'Valor Total': 'Total Vendido (R$)'},
    color_discrete_sequence=['#006400'],
    text_auto=True
    )
    fig1.update_layout(yaxis={'categoryorder':'total ascending'})
    return fig1

# Rodar o app
if __name__ == '__main__':
    app.run(debug=True)

"""##Gráfico 4"""

df_vendas_total = df_vendas_total.merge(df_produtos[['SKU', 'Marca']], on='SKU', how='left')

import dash
from dash import dcc, html, Input, Output
import pandas as pd
import plotly.express as px

# Inicializar app Dash
app = dash.Dash(__name__)

# Filtros únicos
tipos = sorted(df_vendas_total['Tipo do Produto'].dropna().unique().tolist())

# Layout
app.layout = html.Div([
    html.H1("Lojas que mais venderam por Tipo e Marca", style={'textAlign': 'center'}),

    html.Div([
        html.Label("Selecione o Tipo de Produto:"),
        dcc.Dropdown(
            id='dropdown-tipo',
            options=[{'label': tipo, 'value': tipo} for tipo in tipos],
            value=tipos[0],
            clearable=False
        ),
    ], style={'width': '45%', 'display': 'inline-block', 'padding': '0 10px'}),

    html.Div([
        html.Label("Selecione a Marca:"),
        dcc.Dropdown(
            id='dropdown-marca',
            clearable=False
        )
    ], style={'width': '45%', 'display': 'inline-block', 'padding': '0 10px'}),

    dcc.Graph(id='grafico-lojas-vendas')
])

# Callback para atualizar marcas com base no tipo
@app.callback(
    Output('dropdown-marca', 'options'),
    Output('dropdown-marca', 'value'),
    Input('dropdown-tipo', 'value')
)
def atualizar_marcas(tipo_selecionado):
    marcas = df_vendas_total[df_vendas_total['Tipo do Produto'] == tipo_selecionado]['Marca'].dropna().unique()
    marcas = sorted(marcas)
    options = [{'label': marca, 'value': marca} for marca in marcas]
    value = marcas[0] if marcas else None
    return options, value

# Callback para gerar gráfico das lojas
@app.callback(
    Output('grafico-lojas-vendas', 'figure'),
    Input('dropdown-tipo', 'value'),
    Input('dropdown-marca', 'value')
)
def atualizar_grafico(tipo, marca):
    df_filtrado = df_vendas_total[
        (df_vendas_total['Tipo do Produto'] == tipo) &
        (df_vendas_total['Marca'] == marca)
    ]

    vendas_loja = (
        df_filtrado
        .groupby('Nome da Loja')['Valor Total']
        .sum()
        .reset_index()
        .sort_values(by='Valor Total', ascending=False)
    )

    fig = px.bar(
        vendas_loja,
        x='Valor Total',
        y='Nome da Loja',
        orientation='h',
        title=f'Lojas que mais venderam - {tipo} / {marca}',
        labels={'Valor Total': 'Total Vendido (R$)', 'Nome da Loja': 'Loja'},
        color_discrete_sequence=['#FFFF00']
    )

    fig.update_layout(yaxis={'categoryorder': 'total ascending'})  # Ordena corretamente

    return fig

# Rodar app
if __name__ == '__main__':
    app.run(debug=True)

"""##Gráfico 5

"""

import dash
from dash import dcc, html, Input, Output
import plotly.express as px

# Inicializar o app
app = dash.Dash(__name__)

# Obter os tipos de produtos disponíveis
tipos_disponiveis = sorted(df_vendas_total['Tipo do Produto'].dropna().unique().tolist())

# Layout
app.layout = html.Div([
    html.H1("Evolução de Vendas por Marca ao Longo dos Anos", style={'textAlign': 'center'}),

    html.Div([
        html.Label("Selecione o Tipo de Produto:"),
        dcc.Dropdown(
            id='dropdown-tipo-produto',
            options=[{'label': tipo, 'value': tipo} for tipo in tipos_disponiveis],
            value=tipos_disponiveis[0],
            clearable=False
        )
    ], style={'width': '50%', 'margin': 'auto'}),

    dcc.Graph(id='grafico-evolucao-marcas')
])

# Callback
@app.callback(
    Output('grafico-evolucao-marcas', 'figure'),
    Input('dropdown-tipo-produto', 'value')
)
def atualizar_grafico_linhas(tipo_selecionado):
    df_filtrado = df_vendas_total[df_vendas_total['Tipo do Produto'] == tipo_selecionado]

    # Agrupar por ano e marca
    vendas_ano_marca = (
        df_filtrado
        .groupby(['Ano', 'Marca'])['Valor Total']
        .sum()
        .reset_index()
    )

    fig = px.line(
        vendas_ano_marca,
        x='Ano',
        y='Valor Total',
        color='Marca',
        markers=True,
        title=f'Evolução das Vendas por Marca - {tipo_selecionado}',
        labels={'Valor Total': 'Total Vendido (R$)', 'Ano': 'Ano', 'Marca': 'Marca'}
    )

    fig.update_layout(xaxis=dict(dtick=1))  # Garante que os anos fiquem espaçados corretamente

    return fig

# Rodar o app
if __name__ == '__main__':
    app.run(debug=True)

"""##Gráfico 6"""

import pandas as pd
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px

# 1. Carregar dados
vendas_2020 = pd.read_excel("vendas2020.xlsx")
vendas_2021 = pd.read_excel("vendas2021.xlsx")
cadloj = pd.read_excel("cadloj.xlsx")

# 2. Adicionar coluna de ano
vendas_2020["Ano"] = 2020
vendas_2021["Ano"] = 2021

# 3. Unificar os dados de vendas
vendas = pd.concat([vendas_2020, vendas_2021], ignore_index=True)

# 4. Juntar com cadastro de lojas
vendas = vendas.merge(cadloj, on="ID Loja")

# 5. Inicializar o app
app = dash.Dash(__name__)
app.title = "Dashboard de Vendas por Tipo de Loja"

# 6. Layout
app.layout = html.Div([
    html.H1("Comparação de Vendas: Lojas Físicas vs Online", style={'textAlign': 'center'}),

    dcc.Dropdown(
        id='ano-dropdown',
        options=[
            {'label': '2020', 'value': 2020},
            {'label': '2021', 'value': 2021}
        ],
        value=2020,
        clearable=False,
        style={'width': '200px', 'margin': 'auto'}
    ),

    dcc.Graph(id='grafico-vendas')
])

# 7. Callback para atualizar gráfico com base no ano
@app.callback(
    Output('grafico-vendas', 'figure'),
    Input('ano-dropdown', 'value')
)
def atualizar_grafico(ano_selecionado):
    dados_filtrados = vendas[vendas["Ano"] == ano_selecionado]
    agrupado = dados_filtrados.groupby("Tipo").size().reset_index(name="Quantidade de Vendas")

    fig = px.bar(
        agrupado,
        x="Tipo",
        y="Quantidade de Vendas",
        color="Tipo",
        title=f"Vendas por Tipo de Loja - {ano_selecionado}",
        labels={"Tipo": "Tipo de Loja", "Quantidade de Vendas": "Número de Vendas"}
    )
    fig.update_layout(showlegend=False)
    return fig

# 8. Rodar app
if __name__ == '__main__':
    app.run(debug=True)

"""##GRÁFICO FINAL

"""

import dash
from dash import dcc, html, Input, Output
import plotly.express as px
import pandas as pd

# Assumindo que esses DataFrames já foram carregados e preparados:
# df_vendas_total, df_lojas, df_clientes, df_produtos

# Inicialização do app
app = dash.Dash(__name__)
app.title = "Dashboard de Vendas"
server = app.server  # Para implantação se necessário

# ==============================
# === Layout com Abas (Tabs) ===
# ==============================

app.layout = html.Div([
    html.H1("Dashboard de Vendas - Análises Interativas", style={'textAlign': 'center'}),

    dcc.Tabs([
        # === Aba 1: Top 10 Lojas ===
        dcc.Tab(label='Top 10 Lojas por Vendas', children=[
            html.Br(),
            html.Label("Selecione o Tipo de Produto:"),
            dcc.Dropdown(
                id='dropdown-top10-tipo',
                options=[{'label': tipo, 'value': tipo} for tipo in ['Todos'] + sorted(df_vendas_total['Tipo do Produto'].dropna().unique())],
                value='Todos',
                clearable=False,
                style={'width': '50%'}
            ),
            dcc.Graph(id='grafico-top10-lojas')
        ]),

        # === Aba 2: Participação por Tipo (Pizza) ===
        dcc.Tab(label='Participação por Tipo de Produto (Pizza)', children=[
            html.Br(),
            html.Label("Selecione a Loja:"),
            dcc.Dropdown(
                id='dropdown-loja-pizza',
                options=[{'label': loja, 'value': loja} for loja in sorted(df_vendas_total['Nome da Loja'].dropna().unique())],
                value=sorted(df_vendas_total['Nome da Loja'].dropna().unique())[0],
                clearable=False,
                style={'width': '50%'}
            ),
            dcc.Graph(id='grafico-pizza-tipo')
        ]),

        # === Aba 3: Top Clientes por Ano ===
        dcc.Tab(label='Top 10 Clientes por Ano', children=[
            html.Br(),
            html.Label("Selecione o Ano:"),
            dcc.Dropdown(
                id='dropdown-ano-clientes',
                options=[{'label': str(ano), 'value': ano} for ano in sorted(df_vendas_total['Ano'].dropna().unique())],
                value=sorted(df_vendas_total['Ano'].dropna().unique())[0],
                clearable=False,
                style={'width': '30%'}
            ),
            dcc.Graph(id='grafico-clientes')
        ]),

        # === Aba 4: Lojas por Tipo e Marca ===
        dcc.Tab(label='Lojas por Tipo e Marca', children=[
            html.Br(),
            html.Div([
                html.Label("Tipo de Produto:"),
                dcc.Dropdown(
                    id='dropdown-tipo-marca',
                    options=[{'label': tipo, 'value': tipo} for tipo in sorted(df_vendas_total['Tipo do Produto'].dropna().unique())],
                    value=sorted(df_vendas_total['Tipo do Produto'].dropna().unique())[0],
                    clearable=False
                ),
            ], style={'width': '45%', 'display': 'inline-block'}),

            html.Div([
                html.Label("Marca:"),
                dcc.Dropdown(id='dropdown-marca', clearable=False)
            ], style={'width': '45%', 'display': 'inline-block'}),

            dcc.Graph(id='grafico-lojas-marca')
        ]),

        # === Aba 5: Evolução Anual por Marca ===
        dcc.Tab(label='Evolução de Vendas por Marca (Ano)', children=[
            html.Br(),
            html.Label("Selecione o Tipo de Produto:"),
            dcc.Dropdown(
                id='dropdown-evolucao',
                options=[{'label': tipo, 'value': tipo} for tipo in sorted(df_vendas_total['Tipo do Produto'].dropna().unique())],
                value=sorted(df_vendas_total['Tipo do Produto'].dropna().unique())[0],
                clearable=False,
                style={'width': '50%'}
            ),
            dcc.Graph(id='grafico-evolucao')
        ]),

        # === Aba 6: Comparação Tipo de Loja ===
         dcc.Tab(label='Comparação de Vendas: Lojas Físicas vs Online', children=[
            html.Br(),
            html.Label("Selecione o Ano:"),
            dcc.Dropdown(
                id='ano-dropdown',
                options=[
                    {'label': '2020', 'value': 2020},
                    {'label': '2021', 'value': 2021}
                ],
                value=2020,
                clearable=False,
                style={'width': '200px', 'margin': 'auto'}
            ),
            dcc.Graph(id='grafico-vendas')
        ])
    ])
])

# ============================================
# === CALLBACKS para cada aba interativa ===
# ============================================

# Aba 1 - Top 10 Lojas por Vendas
@app.callback(
    Output('grafico-top10-lojas', 'figure'),
    Input('dropdown-top10-tipo', 'value')
)
def atualizar_top10(tipo):
    if tipo == 'Todos':
        df = df_vendas_total
    else:
        df = df_vendas_total[df_vendas_total['Tipo do Produto'] == tipo]

    vendas = df.groupby('Nome da Loja')['Valor Total'].sum().nlargest(10).reset_index()

    fig = px.bar(
        vendas,
        x='Valor Total',
        y='Nome da Loja',
        orientation='h',
        title=f'Top 10 Lojas - {tipo}',
        text_auto=True
    )
    fig.update_layout(yaxis={'categoryorder': 'total ascending'})
    return fig

# Aba 2 - Pizza por Tipo de Produto
@app.callback(
    Output('grafico-pizza-tipo', 'figure'),
    Input('dropdown-loja-pizza', 'value')
)
def atualizar_pizza(loja):
    df = df_vendas_total[df_vendas_total['Nome da Loja'] == loja]
    vendas = df.groupby('Tipo do Produto')['Valor Total'].sum().reset_index()

    fig = px.pie(vendas, names='Tipo do Produto', values='Valor Total', hole=0.4,
                 title=f'Participação nas Vendas - {loja}')
    return fig

# Aba 3 - Top Clientes por Ano
@app.callback(
    Output('grafico-clientes', 'figure'),
    Input('dropdown-ano-clientes', 'value')
)
def atualizar_clientes(ano):
    df = df_vendas_total[df_vendas_total['Ano'] == ano]
    vendas = df.groupby('Nome Completo')['Valor Total'].sum().nlargest(10).reset_index()

    fig = px.bar(
        vendas,
        x='Valor Total',
        y='Nome Completo',
        orientation='h',
        text_auto=True,
        title=f'Top 10 Clientes - {ano}'
    )
    fig.update_layout(yaxis={'categoryorder': 'total ascending'})
    return fig

# Aba 4 - Lojas por Tipo e Marca
@app.callback(
    Output('dropdown-marca', 'options'),
    Output('dropdown-marca', 'value'),
    Input('dropdown-tipo-marca', 'value')
)
def atualizar_dropdown_marca(tipo):
    marcas = df_vendas_total[df_vendas_total['Tipo do Produto'] == tipo]['Marca'].dropna().unique()
    opcoes = [{'label': m, 'value': m} for m in sorted(marcas)]
    return opcoes, opcoes[0]['value'] if opcoes else None

@app.callback(
    Output('grafico-lojas-marca', 'figure'),
    Input('dropdown-tipo-marca', 'value'),
    Input('dropdown-marca', 'value')
)
def atualizar_grafico_marca(tipo, marca):
    df = df_vendas_total[(df_vendas_total['Tipo do Produto'] == tipo) & (df_vendas_total['Marca'] == marca)]
    vendas = df.groupby('Nome da Loja')['Valor Total'].sum().reset_index().sort_values(by='Valor Total')

    fig = px.bar(
        vendas,
        x='Valor Total',
        y='Nome da Loja',
        orientation='h',
        title=f'Lojas - {tipo} / {marca}',
        color_discrete_sequence=['#FFD700']
    )
    return fig

# Aba 5 - Evolução de Vendas por Marca
@app.callback(
    Output('grafico-evolucao', 'figure'),
    Input('dropdown-evolucao', 'value')
)
def atualizar_evolucao(tipo):
    df = df_vendas_total[df_vendas_total['Tipo do Produto'] == tipo]
    vendas = df.groupby(['Ano', 'Marca'])['Valor Total'].sum().reset_index()

    fig = px.line(
        vendas,
        x='Ano',
        y='Valor Total',
        color='Marca',
        markers=True,
        title=f'Evolução Anual - {tipo}'
    )
    fig.update_layout(xaxis=dict(dtick=1))
    return fig

@app.callback(
    Output('grafico-vendas', 'figure'),  # Corrigido o ID do gráfico para 'grafico-vendas'
    Input('ano-dropdown', 'value')  # Corrigido o ID do dropdown para 'ano-dropdown'
)
def atualizar_comparacao_tipo_loja(ano):
    # Filtra o DataFrame para o ano selecionado
    dados_filtrados = df_vendas_total[df_vendas_total['Ano'] == ano]

    # Agrupar por tipo de loja (Física ou Online) e somar o valor total das vendas
    agrupado = dados_filtrados.groupby('Tipo')['Valor Total'].sum().reset_index()

    # Criar gráfico de barras
    fig = px.bar(
        agrupado,
        x='Tipo',
        y='Valor Total',
        color='Tipo',
        title=f"Comparação de Vendas por Tipo de Loja - {ano}",
        labels={'Valor Total': 'Valor Total Vendido (R$)', 'Tipo': 'Tipo de Loja'},
        color_discrete_map={'Física': 'blue', 'Online': 'green'}
    )

    # Exibir gráfico
    return fig
if __name__ == '__main__':
  app.run(debug=True)

import dash
from dash import dcc, html, Input, Output
import plotly.express as px
import pandas as pd

# Assumindo que esses DataFrames já foram carregados e preparados:
# df_vendas_total, df_lojas, df_clientes, df_produtos

# Inicialização do app
app = dash.Dash(__name__)
app.title = "Dashboard de Vendas"
server = app.server  # Para implantação se necessário

# Layout sem Tabs, todos na mesma página
app.layout = html.Div([
    html.H1("Dashboard de Vendas - Análises Interativas", style={'textAlign': 'center'}),

    # === Top 10 Lojas por Vendas ===
    html.Div([
        html.Label("Selecione o Tipo de Produto:"),
        dcc.Dropdown(
            id='dropdown-top10-tipo',
            options=[{'label': tipo, 'value': tipo} for tipo in ['Todos'] + sorted(df_vendas_total['Tipo do Produto'].dropna().unique())],
            value='Todos',
            clearable=False,
            style={'width': '50%'}
        ),
        dcc.Graph(id='grafico-top10-lojas')
    ], style={'marginBottom': '30px'}),

    # === Participação por Tipo (Pizza) ===
    html.Div([
        html.Label("Selecione a Loja:"),
        dcc.Dropdown(
            id='dropdown-loja-pizza',
            options=[{'label': loja, 'value': loja} for loja in sorted(df_vendas_total['Nome da Loja'].dropna().unique())],
            value=sorted(df_vendas_total['Nome da Loja'].dropna().unique())[0],
            clearable=False,
            style={'width': '50%'}
        ),
        dcc.Graph(id='grafico-pizza-tipo')
    ], style={'marginBottom': '30px'}),

    # === Top Clientes por Ano ===
    html.Div([
        html.Label("Selecione o Ano:"),
        dcc.Dropdown(
            id='dropdown-ano-clientes',
            options=[{'label': str(ano), 'value': ano} for ano in sorted(df_vendas_total['Ano'].dropna().unique())],
            value=sorted(df_vendas_total['Ano'].dropna().unique())[0],
            clearable=False,
            style={'width': '30%'}
        ),
        dcc.Graph(id='grafico-clientes')
    ], style={'marginBottom': '30px'}),

    # === Lojas por Tipo e Marca ===
    html.Div([
        html.Label("Tipo de Produto:"),
        dcc.Dropdown(
            id='dropdown-tipo-marca',
            options=[{'label': tipo, 'value': tipo} for tipo in sorted(df_vendas_total['Tipo do Produto'].dropna().unique())],
            value=sorted(df_vendas_total['Tipo do Produto'].dropna().unique())[0],
            clearable=False,
            style={'width': '45%', 'display': 'inline-block'}
        ),
        html.Label("Marca:"),
        dcc.Dropdown(id='dropdown-marca', clearable=False, style={'width': '45%', 'display': 'inline-block'}),
        dcc.Graph(id='grafico-lojas-marca')
    ], style={'marginBottom': '30px'}),

    # === Evolução Anual por Marca ===
    html.Div([
        html.Label("Selecione o Tipo de Produto:"),
        dcc.Dropdown(
            id='dropdown-evolucao',
            options=[{'label': tipo, 'value': tipo} for tipo in sorted(df_vendas_total['Tipo do Produto'].dropna().unique())],
            value=sorted(df_vendas_total['Tipo do Produto'].dropna().unique())[0],
            clearable=False,
            style={'width': '50%'}
        ),
        dcc.Graph(id='grafico-evolucao')
    ], style={'marginBottom': '30px'}),

    # === Comparação Tipo de Loja ===
    html.Div([
        html.Label("Selecione o Ano:"),
        dcc.Dropdown(
            id='ano-dropdown',
            options=[
                {'label': '2020', 'value': 2020},
                {'label': '2021', 'value': 2021}
            ],
            value=2020,
            clearable=False,
            style={'width': '200px', 'margin': 'auto'}
        ),
        dcc.Graph(id='grafico-vendas')
    ])
])

# ============================================
# === CALLBACKS para cada visualização ===
# ============================================

# Top 10 Lojas por Vendas
@app.callback(
    Output('grafico-top10-lojas', 'figure'),
    Input('dropdown-top10-tipo', 'value')
)
def atualizar_top10(tipo):
    if tipo == 'Todos':
        df = df_vendas_total
    else:
        df = df_vendas_total[df_vendas_total['Tipo do Produto'] == tipo]

    vendas = df.groupby('Nome da Loja')['Valor Total'].sum().nlargest(10).reset_index()

    fig = px.bar(
        vendas,
        x='Valor Total',
        y='Nome da Loja',
        orientation='h',
        title=f'Top 10 Lojas - {tipo}',
        text_auto=True
    )
    fig.update_layout(yaxis={'categoryorder': 'total ascending'})
    return fig

# Participação por Tipo (Pizza)
@app.callback(
    Output('grafico-pizza-tipo', 'figure'),
    Input('dropdown-loja-pizza', 'value')
)
def atualizar_pizza(loja):
    df = df_vendas_total[df_vendas_total['Nome da Loja'] == loja]
    vendas = df.groupby('Tipo do Produto')['Valor Total'].sum().reset_index()

    fig = px.pie(vendas, names='Tipo do Produto', values='Valor Total', hole=0.4,
                 title=f'Participação nas Vendas - {loja}')
    return fig

# Top Clientes por Ano
@app.callback(
    Output('grafico-clientes', 'figure'),
    Input('dropdown-ano-clientes', 'value')
)
def atualizar_clientes(ano):
    df = df_vendas_total[df_vendas_total['Ano'] == ano]
    vendas = df.groupby('Nome Completo')['Valor Total'].sum().nlargest(10).reset_index()

    fig = px.bar(
        vendas,
        x='Valor Total',
        y='Nome Completo',
        orientation='h',
        text_auto=True,
        title=f'Top 10 Clientes - {ano}'
    )
    fig.update_layout(yaxis={'categoryorder': 'total ascending'})
    return fig

# Lojas por Tipo e Marca
@app.callback(
    Output('dropdown-marca', 'options'),
    Output('dropdown-marca', 'value'),
    Input('dropdown-tipo-marca', 'value')
)
def atualizar_dropdown_marca(tipo):
    marcas = df_vendas_total[df_vendas_total['Tipo do Produto'] == tipo]['Marca'].dropna().unique()
    opcoes = [{'label': m, 'value': m} for m in sorted(marcas)]
    return opcoes, opcoes[0]['value'] if opcoes else None

@app.callback(
    Output('grafico-lojas-marca', 'figure'),
    Input('dropdown-tipo-marca', 'value'),
    Input('dropdown-marca', 'value')
)
def atualizar_grafico_marca(tipo, marca):
    df = df_vendas_total[(df_vendas_total['Tipo do Produto'] == tipo) & (df_vendas_total['Marca'] == marca)]
    vendas = df.groupby('Nome da Loja')['Valor Total'].sum().reset_index().sort_values(by='Valor Total')

    fig = px.bar(
        vendas,
        x='Valor Total',
        y='Nome da Loja',
        orientation='h',
        title=f'Lojas - {tipo} / {marca}',
        color_discrete_sequence=['#FFD700']
    )
    return fig

# Evolução Anual por Marca
@app.callback(
    Output('grafico-evolucao', 'figure'),
    Input('dropdown-evolucao', 'value')
)
def atualizar_evolucao(tipo):
    df = df_vendas_total[df_vendas_total['Tipo do Produto'] == tipo]
    vendas = df.groupby(['Ano', 'Marca'])['Valor Total'].sum().reset_index()

    fig = px.line(
        vendas,
        x='Ano',
        y='Valor Total',
        color='Marca',
        markers=True,
        title=f'Evolução Anual - {tipo}'
    )
    fig.update_layout(xaxis=dict(dtick=1))
    return fig

# Comparação de Vendas por Tipo de Loja
@app.callback(
    Output('grafico-vendas', 'figure'),
    Input('ano-dropdown', 'value')
)
def atualizar_comparacao_tipo_loja(ano):
    dados_filtrados = df_vendas_total[df_vendas_total['Ano'] == ano]
    agrupado = dados_filtrados.groupby('Tipo')['Valor Total'].sum().reset_index()

    fig = px.bar(
        agrupado,
        x='Tipo',
        y='Valor Total',
        color='Tipo',
        title=f"Comparação de Vendas por Tipo de Loja - {ano}",
        labels={'Valor Total': 'Valor Total Vendido (R$)', 'Tipo': 'Tipo de Loja'},
        color_discrete_map={'Física': 'blue', 'Online': 'green'}
    )

    return fig

if __name__ == '__main__':
    app.run(debug=True)